return {
	"alaviss/nim.nvim",
	lazy = false,
	ft = { "nim", "nims" },
	init = function()
		vim.api.nvim_set_hl(0, "nimKeywordOperator", { link = "@keyword.operator" })
		vim.api.nvim_set_hl(0, "nimStatement", { link = "@keyword" })
		vim.api.nvim_set_hl(0, "nimConditional", { link = "@conditional" })
		vim.api.nvim_set_hl(0, "nimKeyword", { link = "@keyword" })
		vim.api.nvim_set_hl(0, "nimException", { link = "@exception" })
		vim.api.nvim_set_hl(0, "nimRepeat", { link = "@repeat" })
		vim.api.nvim_set_hl(0, "nimConstant", { link = "@constant" })
		vim.api.nvim_set_hl(0, "nimPreCondit", { link = "@conditional" })
		vim.api.nvim_set_hl(0, "nimInclude", { link = "@include" })
		vim.api.nvim_set_hl(0, "nimStructure", { link = "@keyword" })
		vim.api.nvim_set_hl(0, "nimPreProcStmt", { link = "@function.builtin" })
		vim.api.nvim_set_hl(0, "nimComment", { link = "@comment" })
		vim.api.nvim_set_hl(0, "nimTodo", { link = "@text.todo" })
		vim.api.nvim_set_hl(0, "nimLongDocComment", { link = "@comment.documentation" })
		vim.api.nvim_set_hl(0, "nimLongComment", { link = "@comment.documentation" })
		vim.api.nvim_set_hl(0, "nimString", { link = "@string" })
		vim.api.nvim_set_hl(0, "nimEscapeStr", { link = "@string.escape" })
		vim.api.nvim_set_hl(0, "nimEscapeChar", { link = "@string.escape" })
		vim.api.nvim_set_hl(0, "nimEscapeQuote", { link = "@string.escape" })
		vim.api.nvim_set_hl(0, "nimRawString", { link = "@string" })
		vim.api.nvim_set_hl(0, "nimQuote", { link = "@string" })
		vim.api.nvim_set_hl(0, "nimTripleQuote", { link = "nimQuote" })
		vim.api.nvim_set_hl(0, "nimCharacter", { link = "@character" })
		vim.api.nvim_set_hl(0, "nimNumber", { link = "@number" })
		vim.api.nvim_set_hl(0, "nimFloat", { link = "@float" })
		vim.api.nvim_set_hl(0, "nimCustomNumber", { link = "@number" })
		vim.api.nvim_set_hl(0, "nimPragma", { link = "@preproc" })
		vim.api.nvim_set_hl(0, "nimSugUnknown", { link = "@error" })
		vim.api.nvim_set_hl(0, "nimSugParam", { link = "@variable.parameter" })
		vim.api.nvim_set_hl(0, "nimSugModule", { link = "@namespace" })
		vim.api.nvim_set_hl(0, "nimSugType", { link = "@type" })
		vim.api.nvim_set_hl(0, "nimSugGenericParam", { link = "@variable.parameter" })
		vim.api.nvim_set_hl(0, "nimSugVar", { link = "@variable" })
		vim.api.nvim_set_hl(0, "nimSugGlobalVar", { link = "@variable" })
		vim.api.nvim_set_hl(0, "nimSugLet", { link = "@variable" })
		vim.api.nvim_set_hl(0, "nimSugGlobalLet", { link = "@variable" })
		vim.api.nvim_set_hl(0, "nimSugConst", { link = "@constant" })
		vim.api.nvim_set_hl(0, "nimSugResult", { link = "@variable.builtin" })
		vim.api.nvim_set_hl(0, "nimSugProc", { link = "@function.call" })
		vim.api.nvim_set_hl(0, "nimSugFunc", { link = "@function.call" })
		vim.api.nvim_set_hl(0, "nimSugMethod", { link = "@function.call" })
		vim.api.nvim_set_hl(0, "nimSugIterator", { link = "@function.call" })
		vim.api.nvim_set_hl(0, "nimSugConverter", { link = "@function.macro" })
		vim.api.nvim_set_hl(0, "nimSugMacro", { link = "@function.macro" })
		vim.api.nvim_set_hl(0, "nimSugTemplate", { link = "@function.macro" })
		vim.api.nvim_set_hl(0, "nimSugField", { link = "@field" })
		vim.api.nvim_set_hl(0, "nimSugEnumField", { link = "@constant" })
		vim.api.nvim_set_hl(0, "nimSugForVar", { link = "@variable.parameter" })
		vim.api.nvim_set_hl(0, "nimSugLabel", { link = "@label" })
	end,
}
